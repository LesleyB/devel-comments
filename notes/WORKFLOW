WORKFLOW        2010-07-09 10:53:13

This explains the workflow, or overall version control plan for this project. 

Please see workflow.svg. See also VERSIONS (version numbering scheme).

= Context =

This project is not large and currently is the work of one developer. It is based on existing work by another dev; and other participants are embraced. The workflow is designed to scale well to larger projects also. 

Git is used throughout. I admit considerable inexperience with this tool; suggestions are welcome. 

This workflow is based on: 
    http://nvie.com/git-model 
    by Vincent Driessen
    CC-BY-SA

= Branches =

If you clone this project in order to begin work on it, or just to examine what is going on, clone devel. 

If you clone this project in order to build and use it as a tool, clone trunk. 

In a fresh project, the initial, boilerplate commit is made and immediately branched into trunk and devel. In any project with old commits, master is renamed devel and trunk is branched at the same time. 

master
    This branch is now defunct. Development originally took place on master; 
    for that matter, all commits took place on master. This was basically stupid. When several commits went sour, I renamed master to somefunkybranch, checked out some previous commit, and tagged it master. Now, there is NO MASTER BRANCH at all. 

trunk
    This immortal branch takes the place of master in Driessen's scheme. Only two types of branch are based here: hotfix and support. Release branches are merged in here when they are complete and ready to roll; also, hotfixes are merged in as soon as a critical bug is fixed. Therefore, trunk contains the most recent production version of the project. 

devel
    This immortal branch contains commits slated for release; not experimental. Some call this the integration branch. Feature and release branches are based here; and both eventually merge back in. Also, hotfixes are merged into devel at the same time they are merged into trunk. 
    
release (V-x.x.0)
    Branches of this type have a limited lifespan. They are created when devel contains all features slated for the upcoming release. Only "cleanup" work is done here. A given release branch is based on devel and when complete, merges into trunk. Version number is bumped when a release branch is created; the branch is named after the version to be released. A release may be merged into devel at any time; it will be merged into devel at the same time it is merged into trunk. Only one release branch is open at a time; after the last merge, it is "dead". 

feature (F-name)
    Branches of this type have a limited lifespan. Any developer may create a feature branch without notice, so long as its name does not collide with an existing branch. A feature branch contains development of a new feature or aspect of the project. Bugfixes, hotfixes, and general cleanup have their own branches; however a feature branch may be started to experiment with a complex solution to a bug or outright failure. Features are based on devel; and, when complete (although possibly not bug free), merge to devel; after which, the feature branch is "dead". 

hotfix (H-n.n)
    Branches of this type have a very short lifespan. They are created only to resolve simple but critical issues in the current release. If the issue is time-consuming or trivial, the improvement must wait for the next release. Hotfixes are based on trunk and upon completion, merged into both devel and trunk. After this, the hotfix branch is "dead". (But see also support branch.)

support (S-n.n)
    Branches of this type have an indefinitely long lifespan. 
    
    In the event that (all of): 
    a.  A bug worth fixing is found in release V-n.n.0; and
    b.  A newer major version has been released; and
    c.  Some demand exists for the earlier version; then
    ... a support branch may be created. A new feature may not be added in support branch even if it is fully backwards compatible. A support branch is based on the corresponding OLD VERSION V-n.n.0 commit on trunk; it is never merged anywhere. The support is named after its base version. 
    
    Since a given support branch represents the latest production-ready revision of the OLD VERSION, do not make working commits on it. Create a related hotfix branch based on its first commit; fix the bug; then merge the hotfix back to its support. A new bug satisfying the above conditions will start a new hotfix; which will be merged back to the same support. A support branch is not renamed but is tagged with a bugfix number at the appropriate commit. 
    
    If a hotfix is created on support and later releases contain the same bug, then different hotfix branch(es) is(are) based on the later release(s) and managed the same way. The hotfix based on the most recent release is merged to devel (unless testing shows it is not there present). 

Hotfix and support branches are unwieldy and best avoided. Normally, all improvements begin on devel, are developed in a feature branch, merge into devel where they are integrated, and branch off as part of a new release merged into trunk. 


