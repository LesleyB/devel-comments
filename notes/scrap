# form parameters

#   my @formparms       = qw( u_name u_number );


# deal with any submitted form

    #my @inparms        = $cgi->param();
    #my $numinparms     = @inparms;
    
    #my $invalue            ;

    #print "Number of inparms: $numinparms <br>";
    #foreach ( @inparms ) {
        #print "Parameter: $_ <br>";
        #$invalue       = $cgi->param("$_");
        #print "Value:*$invalue* <br>";
        
    #};


    #print <<ENDHTML;
#<form action="test.pl" method="POST">

#Name:
#<input type="text" name="myname" />
#<br />

#Foo:
#<input type="text" name="myfoo" />
#<br />
#<input type="submit" value="Submit" />

#</form>

#ENDHTML

## generate a blank form    (2)

    #print <<ENDHTML;
#<form action="test.pl" method="POST">

#Dog:
#<input type="text" name="mydog" />
#<br />

#Foo:
#<input type="text" name="myfoo" />
#<br />
#<input type="submit" value="Submit" />

#</form>

#ENDHTML




############ this doesn't seem to work ############
#!/usr/bin/perl
use FindBin qw($Bin);
use lib "$Bin/util.pl";

sub this_dir {
    # get calling context, including file path
    my ($package, $file, $line) = caller();
    
    # separate the path from the file name
    my ($path, $filename) =
        $file =~ m|^(.*)/(.*)$|
        or die "cannot determine script dir";
    
    return $path;
    }

sub this_dir{(caller)[1]=~m|(.*)/|?$1:die}

package MyModule;
sub this_dir{(caller)[1]=~m|(.*)/|?$1:die}
use constant DATA_FILE =>
    this_dir."/data.tab";
###################################################

use Dir::Self;
use lib __DIR__ . "/lib";



package IncludeEmAll; 
sub import { my $caller_class = caller(); 
    eval "package $caller_class; 
        use Class1; 
        use Class2;
    "; 
    die $@ if $@; 
} 1;

######## OBJECT METHOD ########
#
#   $obj->method( '-parm' => $value, );     # short
#       
# comment
#   
sub method {
    
    
    
};
######## / ########

######## UTILITY ########
#
#   $return = routine( '-parm' => $value, );        # short
#       
# comment
#   
sub routine :Export( :ALL ) {
    
    
    
};
######## / ########

######## INTERNAL ROUTINE ########
#
#   _do_();     # short
#       
# comment
#   
sub _do_ {
    
    
    
};
######## /_do_ ########


######## INTERNAL ROUTINE ########
#
#   _do_();     # short
#       
# Purpose   : ____
# Parms     : ____
# Reads     : ____
# Returns   : ____
# Writes    : ____
# Throws    : ____
# See also  : ____
# 
# ____
# 
sub _do_ {
    
    
    
};
######## /_do_ ########

# TAB STOPS                             1   1   1   1   1   1   1   1   1   1
#   1   2   3   4   5   6   7   8   9   0   1   2   3   4   5   6   7   8   9
#   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

#----------------------------------------------------------------------------#

#============================================================================#


my $prev_fh         = select $infh;
local $/            = undef;            # slurp
select $prev_fh;

my $prev_fh         = select $outfh;
local $|            = 1;                # autoflush
select $prev_fh;


# selectively catch warnings
BEGIN { 
    $DOWARN     = 1;
    $SIG{'__WARN__'} = sub { 
        if ($DOWARN) {
            warn          $_[0];
        } 
        else {
            $WARNING    = $_[0];
        };
    } 
}
#### /warnings trap ####




    for ( my $i = 0; $i < 8; $i++ ) {
        
        
    };
    
    
    
    
    
    # dispatch tree
    if    ( 0 ) {
        
    } 
    elsif ( 0 ) {
        
    } 
    else {
        
    };
    
    
    

#   shell metacharacter list: 
#   &;`'\"|*?~<>^()[]{}$\n\r

putting the . back in PATH:

> PATH=.:/usr/bin perl -wle 'use Env qw(@PATH); 
@PATH = grep { $_ ne "." } @PATH; system("env");' | grep ^PATH

<Somni> PATH=/usr/bin

  sub init {
    my $self = shift;
    if ($self->SUPER::init( @_ )) {
      # ... perform initialisation ...
      return 1;
    }
    return 0;
  }

    
$out = ( $in +1 ) %2;       # 1 for 0, 0 for 1
